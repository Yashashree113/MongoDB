use mongo_practice
'switched to db mongo_practice'
show collections
movies
db.movies.find()
{ _id: ObjectId("6076e1b855d8025fee366623"),
  title: 'Fight Club',
  writer: 'Chuck Palahniuko',
  year: 1999,
  actors: [ 'Brad Pitt', 'Edward Norton' ] }
{ _id: ObjectId("6076e30855d8025fee366625"),
  title: 'Pulp Fiction',
  writer: 'Quentin Tarantino',
  year: 1994,
  actors: [ 'John Travolta', 'Uma Thurman' ] }
{ _id: ObjectId("6076e38d55d8025fee366626"),
  title: 'Inglorious Basterds',
  writer: 'Quentin Tarantino',
  year: 2009,
  actors: [ 'Brad Pitt', 'Diane Kruger', 'Eli Roth' ] }
{ _id: ObjectId("6076e44c55d8025fee366627"),
  title: 'The Hobbit: An Unexpected Journey',
  writer: 'J.R.R. Tolkein',
  year: 2012,
  franchise: 'The Hobbit',
  synopsis: 'A reluctant hobbit, Bilbo Baggins sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home- and the gold within it- from the dragon Smaug.' }
{ _id: ObjectId("6076e4c955d8025fee366628"),
  title: 'The Hobbit: The Desolution of Smaug',
  writer: 'J.R.R. Tolkein',
  year: 2013,
  franchise: 'The Hobbit' }
{ _id: ObjectId("6076e54855d8025fee366629"),
  title: 'The Hobbit: The Battle of the Five Armies',
  writer: 'J.R.R. Tolkein',
  year: 2012,
  franchise: 'The Hobbit',
  synopsis: 'Bilbo and Company are forced to enagae in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness.' }
{ _id: ObjectId("6076e64155d8025fee36662a"),
  title: 'Pee Wee Herman\'s Big Adventure' }
{ _id: ObjectId("6076e68555d8025fee36662b"), title: 'Avatar' }



db.movies.find({"writer":"Quentin Tarantino"})
{ _id: ObjectId("6076e30855d8025fee366625"),
  title: 'Pulp Fiction',
  writer: 'Quentin Tarantino',
  year: 1994,
  actors: [ 'John Travolta', 'Uma Thurman' ] }
{ _id: ObjectId("6076e38d55d8025fee366626"),
  title: 'Inglorious Basterds',
  writer: 'Quentin Tarantino',
  year: 2009,
  actors: [ 'Brad Pitt', 'Diane Kruger', 'Eli Roth' ] }
db.movies.find({"actors":"Brad Pitt"})
{ _id: ObjectId("6076e1b855d8025fee366623"),
  title: 'Fight Club',
  writer: 'Chuck Palahniuko',
  year: 1999,
  actors: [ 'Brad Pitt', 'Edward Norton' ] }
{ _id: ObjectId("6076e38d55d8025fee366626"),
  title: 'Inglorious Basterds',
  writer: 'Quentin Tarantino',
  year: 2009,
  actors: [ 'Brad Pitt', 'Diane Kruger', 'Eli Roth' ] }
db.movies.find({"franchise":"The Hobbit"})
{ _id: ObjectId("6076e44c55d8025fee366627"),
  title: 'The Hobbit: An Unexpected Journey',
  writer: 'J.R.R. Tolkein',
  year: 2012,
  franchise: 'The Hobbit',
  synopsis: 'A reluctant hobbit, Bilbo Baggins sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home- and the gold within it- from the dragon Smaug.' }
{ _id: ObjectId("6076e4c955d8025fee366628"),
  title: 'The Hobbit: The Desolation of Smaug',
  writer: 'J.R.R. Tolkein',
  year: 2013,
  franchise: 'The Hobbit' }
{ _id: ObjectId("6076e54855d8025fee366629"),
  title: 'The Hobbit: The Battle of the Five Armies',
  writer: 'J.R.R. Tolkein',
  year: 2012,
  franchise: 'The Hobbit',
  synopsis: 'Bilbo and Company are forced to enagae in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness.' }
db.movies.find({year:{$lt:2000}})
{ _id: ObjectId("6076e1b855d8025fee366623"),
  title: 'Fight Club',
  writer: 'Chuck Palahniuko',
  year: 1999,
  actors: [ 'Brad Pitt', 'Edward Norton' ] }
{ _id: ObjectId("6076e30855d8025fee366625"),
  title: 'Pulp Fiction',
  writer: 'Quentin Tarantino',
  year: 1994,
  actors: [ 'John Travolta', 'Uma Thurman' ] }
db.movies.find({$or:[{year:{$lt:2000}},{year:{$gt:2010}}]})
{ _id: ObjectId("6076e1b855d8025fee366623"),
  title: 'Fight Club',
  writer: 'Chuck Palahniuko',
  year: 1999,
  actors: [ 'Brad Pitt', 'Edward Norton' ] }
{ _id: ObjectId("6076e30855d8025fee366625"),
  title: 'Pulp Fiction',
  writer: 'Quentin Tarantino',
  year: 1994,
  actors: [ 'John Travolta', 'Uma Thurman' ] }
{ _id: ObjectId("6076e44c55d8025fee366627"),
  title: 'The Hobbit: An Unexpected Journey',
  writer: 'J.R.R. Tolkein',
  year: 2012,
  franchise: 'The Hobbit' }
{ _id: ObjectId("6076e4c955d8025fee366628"),
  title: 'The Hobbit: The Desolation of Smaug',
  writer: 'J.R.R. Tolkein',
  year: 2013,
  franchise: 'The Hobbit' }
{ _id: ObjectId("6076e54855d8025fee366629"),
  title: 'The Hobbit: The Battle of the Five Armies',
  writer: 'J.R.R. Tolkein',
  year: 2012,
  franchise: 'The Hobbit',
  synopsis: 'Bilbo and Company are forced to enagae in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness.' }


db.movies.update({title:'The Hobbit: An Unexpected Journey'},{$set:{synopsis:'A reluctant hobbit,Bilbo Baggins, sets out to the Lonely Mountain with a spirirted group of dwarves to reclaim their mountain home- and the gold within it- from the dragon Smaug'}})
'DeprecationWarning: Collection.update() is deprecated. Use updateOne, updateMany or bulkWrite.'
{ acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0 }
db.movies.update({title:'The Hobbit: The Desolation of Smaug'},{$set:{synopsis:'The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring'}})
{ acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0 }


db.movies.update({title:'Pulp Fiction'},{$push:{actors:"Samuel L. Jackson"}})
{ acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0 }

db.movies.find({synopsis:{$regex:'Bilbo'}})
{ _id: ObjectId("6076e44c55d8025fee366627"),
  title: 'The Hobbit: An Unexpected Journey',
  writer: 'J.R.R. Tolkein',
  year: 2012,
  franchise: 'The Hobbit',
  synopsis: 'A reluctant hobbit,Bilbo Baggins, sets out to the Lonely Mountain with a spirirted group of dwarves to reclaim their mountain home- and the gold within it- from the dragon Smaug' }
{ _id: ObjectId("6076e4c955d8025fee366628"),
  title: 'The Hobbit: The Desolation of Smaug',
  writer: 'J.R.R. Tolkein',
  year: 2013,
  franchise: 'The Hobbit',
  synopsis: 'The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring' }
{ _id: ObjectId("6076e54855d8025fee366629"),
  title: 'The Hobbit: The Battle of the Five Armies',
  writer: 'J.R.R. Tolkein',
  year: 2012,
  franchise: 'The Hobbit',
  synopsis: 'Bilbo and Company are forced to enagae in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness.' }
db.movies.find({synopsis:{$regex:'Gandalf'}})
{ _id: ObjectId("6076e4c955d8025fee366628"),
  title: 'The Hobbit: The Desolation of Smaug',
  writer: 'J.R.R. Tolkein',
  year: 2013,
  franchise: 'The Hobbit',
  synopsis: 'The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring' }


db.movies.find({$and:[{synopsis:{$regex:'Bilbo'}},{synopsis:{$not:{$regex:"Ganfalf"}}}]})
{ _id: ObjectId("6076e44c55d8025fee366627"),
  title: 'The Hobbit: An Unexpected Journey',
  writer: 'J.R.R. Tolkein',
  year: 2012,
  franchise: 'The Hobbit',
  synopsis: 'A reluctant hobbit,Bilbo Baggins, sets out to the Lonely Mountain with a spirirted group of dwarves to reclaim their mountain home- and the gold within it- from the dragon Smaug' }
{ _id: ObjectId("6076e4c955d8025fee366628"),
  title: 'The Hobbit: The Desolation of Smaug',
  writer: 'J.R.R. Tolkein',
  year: 2013,
  franchise: 'The Hobbit',
  synopsis: 'The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring' }
{ _id: ObjectId("6076e54855d8025fee366629"),
  title: 'The Hobbit: The Battle of the Five Armies',
  writer: 'J.R.R. Tolkein',
  year: 2012,
  franchise: 'The Hobbit',
  synopsis: 'Bilbo and Company are forced to enagae in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness.' }
db.movies.find({$or:[{synopsis:{$regex:'dwarves'}},{synopsis:{$regex:"hobbit"}}]})
{ _id: ObjectId("6076e44c55d8025fee366627"),
  title: 'The Hobbit: An Unexpected Journey',
  writer: 'J.R.R. Tolkein',
  year: 2012,
  franchise: 'The Hobbit',
  synopsis: 'A reluctant hobbit,Bilbo Baggins, sets out to the Lonely Mountain with a spirirted group of dwarves to reclaim their mountain home- and the gold within it- from the dragon Smaug' }
{ _id: ObjectId("6076e4c955d8025fee366628"),
  title: 'The Hobbit: The Desolation of Smaug',
  writer: 'J.R.R. Tolkein',
  year: 2013,
  franchise: 'The Hobbit',
  synopsis: 'The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring' }

db.movies.find({$and:[{synopsis:{$regex:'gold'}},{synopsis:{$regex:"dragon"}}]})
{ _id: ObjectId("6076e44c55d8025fee366627"),
  title: 'The Hobbit: An Unexpected Journey',
  writer: 'J.R.R. Tolkein',
  year: 2012,
  franchise: 'The Hobbit',
  synopsis: 'A reluctant hobbit,Bilbo Baggins, sets out to the Lonely Mountain with a spirirted group of dwarves to reclaim their mountain home- and the gold within it- from the dragon Smaug' }
db.movies.remove({title:"Pee Wee Herman's Big Adventure"})
'DeprecationWarning: Collection.remove() is deprecated. Use deleteOne, deleteMany or bulkWrite.'
{ acknowledged: true, deletedCount: 1 }
db.movies.remove({title:"Avatar"})
{ acknowledged: true, deletedCount: 1 }



//
db.users.insert({username:'GoodGuyGreg',first_name:"Good Guy",last_name:"Greg"})
'DeprecationWarning: Collection.insert() is deprecated. Use insertOne, insertMany or bulkWrite.'
{ acknowledged: true,
  insertedIds: { '0': ObjectId("6077356d703b8656e8ad4002") } }
db.users.insert({username:'ScumbagSteve',fullname:{first:"Scumbag",last:"Steve"}})
{ acknowledged: true,
  insertedIds: { '0': ObjectId("607735d1703b8656e8ad4003") } }


db.posts.insert({username:" GoodgGuyGreg",title:"Passes out at party",body:"Wakes up early and cleans house"})
{ acknowledged: true,
  insertedIds: { '0': ObjectId("60773669703b8656e8ad4004") } }
db.posts.insert({username:" GoodgGuyGreg",title:"Steals your identity",body:"Raises your credit score"})
{ acknowledged: true,
  insertedIds: { '0': ObjectId("607736b1703b8656e8ad4005") } }
db.posts.insert({username:" GoodGuyGreg",title:"Reports a bug in your code",body:"Sends you a Pull Request"})
{ acknowledged: true,
  insertedIds: { '0': ObjectId("607736f9703b8656e8ad4006") } }
db.posts.insert({username:" ScumbagSteve",title:"Borrows something",body:"Sells it"})
{ acknowledged: true,
  insertedIds: { '0': ObjectId("60773752703b8656e8ad4007") } }
db.posts.insert({username:" ScumbagSteve",title:"Borrows everything",body:"The End"})
{ acknowledged: true,
  insertedIds: { '0': ObjectId("6077376d703b8656e8ad4008") } }
db.posts.insert({username:" ScumbagSteve",title:"Forks your repo on github",body:"Sets to private"})
{ acknowledged: true,
  insertedIds: { '0': ObjectId("607737a3703b8656e8ad4009") } }
db.comments.insert({username:"GoodGuyGreg",comment:"Hope you got a good deal!",post:ObjectId("60773752703b8656e8ad4007")})
{ acknowledged: true,
  insertedIds: { '0': ObjectId("6077392d703b8656e8ad400a") } }
db.comments.insert({username:"GoodGuyGreg",comment:"What's mine is yours!",post:ObjectId("6077376d703b8656e8ad4008")})
{ acknowledged: true,
  insertedIds: { '0': ObjectId("60773989703b8656e8ad400b") } }
db.comments.insert({username:"GoodGuyGreg",comment:"Don't violate the licensing agreement!",post:ObjectId("607737a3703b8656e8ad4009")})
{ acknowledged: true,
  insertedIds: { '0': ObjectId("607739c9703b8656e8ad400c") } }
db.comments.insert({username:"ScumbagSteve",comment:"It still isn't clean",post:ObjectId("60773669703b8656e8ad4004")})
{ acknowledged: true,
  insertedIds: { '0': ObjectId("60773a1f703b8656e8ad400d") } }
db.comments.insert({username:"ScumbagSteve",comment:"Denied your PR cause I found a hack",post:ObjectId("607736f9703b8656e8ad4006")})
{ acknowledged: true,
  insertedIds: { '0': ObjectId("60773a5e703b8656e8ad400e") } }
db.users.find()
{ _id: ObjectId("6077356d703b8656e8ad4002"),
  username: 'GoodGuyGreg',
  first_name: 'Good Guy',
  last_name: 'Greg' }
{ _id: ObjectId("607735d1703b8656e8ad4003"),
  username: 'ScumbagSteve',
  fullname: { first: 'Scumbag', last: 'Steve' } }
db.posts.find()
{ _id: ObjectId("60773669703b8656e8ad4004"),
  username: ' GoodGuyGreg',
  title: 'Passes out at party',
  body: 'Wakes up early and cleans house' }
{ _id: ObjectId("607736b1703b8656e8ad4005"),
  username: ' GoodGuyGreg',
  title: 'Steals your identity',
  body: 'Raises your credit score' }
{ _id: ObjectId("607736f9703b8656e8ad4006"),
  username: ' GoodGuyGreg',
  title: 'Reports a bug in your code',
  body: 'Sends you a Pull Request' }
{ _id: ObjectId("60773752703b8656e8ad4007"),
  username: ' ScumbagSteve',
  title: 'Borrows something',
  body: 'Sells it' }
{ _id: ObjectId("6077376d703b8656e8ad4008"),
  username: ' ScumbagSteve',
  title: 'Borrows everything',
  body: 'The End' }
{ _id: ObjectId("607737a3703b8656e8ad4009"),
  username: ' ScumbagSteve',
  title: 'Forks your repo on github',
  body: 'Sets to private' }

db.posts.find({username:" GoodGuyGreg"})
{ _id: ObjectId("60773669703b8656e8ad4004"),
  username: ' GoodGuyGreg',
  title: 'Passes out at party',
  body: 'Wakes up early and cleans house' }
{ _id: ObjectId("607736b1703b8656e8ad4005"),
  username: ' GoodGuyGreg',
  title: 'Steals your identity',
  body: 'Raises your credit score' }
{ _id: ObjectId("607736f9703b8656e8ad4006"),
  username: ' GoodGuyGreg',
  title: 'Reports a bug in your code',
  body: 'Sends you a Pull Request' }
db.posts.find({username:" ScumbagSteve"})
{ _id: ObjectId("60773752703b8656e8ad4007"),
  username: ' ScumbagSteve',
  title: 'Borrows something',
  body: 'Sells it' }
{ _id: ObjectId("6077376d703b8656e8ad4008"),
  username: ' ScumbagSteve',
  title: 'Borrows everything',
  body: 'The End' }
{ _id: ObjectId("607737a3703b8656e8ad4009"),
  username: ' ScumbagSteve',
  title: 'Forks your repo on github',
  body: 'Sets to private' }
db.comments.find()
{ _id: ObjectId("6077392d703b8656e8ad400a"),
  username: 'GoodGuyGreg',
  comment: 'Hope you got a good deal!',
  post: ObjectId("60773752703b8656e8ad4007") }
{ _id: ObjectId("60773989703b8656e8ad400b"),
  username: 'GoodGuyGreg',
  comment: 'What\'s mine is yours!',
  post: ObjectId("6077376d703b8656e8ad4008") }
{ _id: ObjectId("607739c9703b8656e8ad400c"),
  username: 'GoodGuyGreg',
  comment: 'Don\'t violate the licensing agreement!',
  post: ObjectId("607737a3703b8656e8ad4009") }
{ _id: ObjectId("60773a1f703b8656e8ad400d"),
  username: 'ScumbagSteve',
  comment: 'It still isn\'t clean',
  post: ObjectId("60773669703b8656e8ad4004") }
{ _id: ObjectId("60773a5e703b8656e8ad400e"),
  username: 'ScumbagSteve',
  comment: 'Denied your PR cause I found a hack',
  post: ObjectId("607736f9703b8656e8ad4006") }
db.comments.find({username:"GoodGuyGreg"})
{ _id: ObjectId("6077392d703b8656e8ad400a"),
  username: 'GoodGuyGreg',
  comment: 'Hope you got a good deal!',
  post: ObjectId("60773752703b8656e8ad4007") }
{ _id: ObjectId("60773989703b8656e8ad400b"),
  username: 'GoodGuyGreg',
  comment: 'What\'s mine is yours!',
  post: ObjectId("6077376d703b8656e8ad4008") }
{ _id: ObjectId("607739c9703b8656e8ad400c"),
  username: 'GoodGuyGreg',
  comment: 'Don\'t violate the licensing agreement!',
  post: ObjectId("607737a3703b8656e8ad4009") }


db.comments.find({username:"ScumbagSteve"})
{ _id: ObjectId("60773a1f703b8656e8ad400d"),
  username: 'ScumbagSteve',
  comment: 'It still isn\'t clean',
  post: ObjectId("60773669703b8656e8ad4004") }
{ _id: ObjectId("60773a5e703b8656e8ad400e"),
  username: 'ScumbagSteve',
  comment: 'Denied your PR cause I found a hack',
  post: ObjectId("607736f9703b8656e8ad4006") }

db.comments.find({post:ObjectId('607736f9703b8656e8ad4006')})
{ _id: ObjectId("60773a5e703b8656e8ad400e"),
  username: 'ScumbagSteve',
  comment: 'Denied your PR cause I found a hack',
  post: ObjectId("607736f9703b8656e8ad4006") }




